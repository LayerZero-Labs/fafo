use alloy_sol_types::SolValue;
use revm::primitives::{keccak256, Address, U256};
use revm::{
    context::{
        result::{EVMError, HaltReason, InvalidTransaction},
        ContextTr, JournalOutput, JournalTr,
    },
    handler::{instructions::InstructionProvider, EthFrame, EvmTr, Handler, PrecompileProvider},
    interpreter::{interpreter::EthInterpreter, InterpreterResult},
    Database,
};

fn erc_address_storage(address: Address) -> U256 {
    keccak256((address, U256::from(0)).abi_encode()).into()
}

struct EvmHandler<EVM> {
    pub _phantom: core::marker::PhantomData<EVM>,
}

impl<EVM> Default for EvmHandler<EVM> {
    fn default() -> Self {
        Self {
            _phantom: core::marker::PhantomData,
        }
    }
}

impl<EVM> Handler for EvmHandler<EVM>
where
    EVM: EvmTr<
        Context: ContextTr<Journal: JournalTr<FinalOutput = JournalOutput>>,
        Precompiles: PrecompileProvider<EVM::Context, Output = InterpreterResult>,
        Instructions: InstructionProvider<
            Context = EVM::Context,
            InterpreterTypes = EthInterpreter,
        >,
    >,
{
    type Evm = EVM;
    type Error = EVMError<<<EVM::Context as ContextTr>::Db as Database>::Error, InvalidTransaction>;
    type Frame = EthFrame<
        EVM,
        EVMError<<<EVM::Context as ContextTr>::Db as Database>::Error, InvalidTransaction>,
        <EVM::Instructions as InstructionProvider>::InterpreterTypes,
    >;
    type HaltReason = HaltReason;
}

#[cfg(test)]
mod tests {

    use exepipe::test_helper::encode_ec20_transfer_data;
    use revm::handler::Handler;
    use revm::primitives::hex::FromHex;
    use revm::primitives::{TxKind, KECCAK_EMPTY};
    use revm::state::{Bytecode, EvmStorageSlot};
    use revm::{
        context::BlockEnv,
        database::{CacheDB, EmptyDB},
        primitives::{address, keccak256, Bytes, U256},
        state::AccountInfo,
        Context, MainBuilder, MainContext,
    };

    use crate::{erc_address_storage, EvmHandler};

    #[test]
    fn test_new_eoa_code_hash() {
        let a1 = address!("00000000000000000000000000000000000000a1");
        let a2 = address!("00000000000000000000000000000000000000a2");

        let one_ether = U256::from(1_000_000_000_000_000_000u128);
        let a1_info = AccountInfo {
            nonce: 0_u64,
            balance: one_ether,
            code_hash: keccak256(Bytes::new()),
            code: None,
        };

        let mut cache_db = CacheDB::new(EmptyDB::default());
        cache_db.insert_account_info(a1, a1_info.clone());

        let mut evm = Context::mainnet()
            .with_db(cache_db)
            .with_block(BlockEnv::default())
            .modify_tx_chained(|tx| {
                tx.caller = a1;
                tx.kind = TxKind::Call(a2);
                tx.value = U256::from(1);
                tx.data = Bytes::new();
            })
            .build_mainnet();

        let evm_result = EvmHandler::default().run(&mut evm);

        assert_eq!(
            KECCAK_EMPTY,
            evm_result.unwrap().state.get(&a2).unwrap().info.code_hash
        );
    }

    #[test]
    fn test_deploy_erc20() {
        let user = address!("00000000000000000000000000000000000000a1");
        let mut cache_db = CacheDB::new(EmptyDB::default());
        cache_db.insert_account_info(
            user,
            AccountInfo {
                balance: U256::from(1_000_000_000_000_000_000u128),
                ..AccountInfo::default()
            },
        );

        /* code is
            // SPDX-License-Identifier: MIT
            pragma solidity ^0.8.0;

            import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

            contract MyToken is ERC20 {
                constructor() ERC20("MyToken", "MTK") {
                    _mint(msg.sender, 1 ** decimals());
                }
            }
        */
        let erc20_deploy_hex = "0x608060405234801561000f575f80fd5b506040518060400160405280600781526020017f4d79546f6b656e000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d544b0000000000000000000000000000000000000000000000000000000000815250816003908161008b91906105bb565b50806004908161009b91906105bb565b5050506100d6336100b06100db60201b60201c565b600a6100bc91906107f2565b633b9aca006100cb919061083c565b6100e360201b60201c565b610965565b5f6012905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610153575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161014a91906108bc565b60405180910390fd5b6101645f838361016860201b60201c565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036101b8578060025f8282546101ac91906108d5565b92505081905550610286565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610241578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161023893929190610917565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036102cd578060025f8282540392505081905550610317565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610374919061094c565b60405180910390a3505050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806103fc57607f821691505b60208210810361040f5761040e6103b8565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026104717fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610436565b61047b8683610436565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6104bf6104ba6104b584610493565b61049c565b610493565b9050919050565b5f819050919050565b6104d8836104a5565b6104ec6104e4826104c6565b848454610442565b825550505050565b5f90565b6105006104f4565b61050b8184846104cf565b505050565b5b8181101561052e576105235f826104f8565b600181019050610511565b5050565b601f8211156105735761054481610415565b61054d84610427565b8101602085101561055c578190505b61057061056885610427565b830182610510565b50505b505050565b5f82821c905092915050565b5f6105935f1984600802610578565b1980831691505092915050565b5f6105ab8383610584565b9150826002028217905092915050565b6105c482610381565b67ffffffffffffffff8111156105dd576105dc61038b565b5b6105e782546103e5565b6105f2828285610532565b5f60209050601f831160018114610623575f8415610611578287015190505b61061b85826105a0565b865550610682565b601f19841661063186610415565b5f5b8281101561065857848901518255600182019150602085019450602081019050610633565b868310156106755784890151610671601f891682610584565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b600185111561070c578086048111156106e8576106e761068a565b5b60018516156106f75780820291505b8081029050610705856106b7565b94506106cc565b94509492505050565b5f8261072457600190506107df565b81610731575f90506107df565b8160018114610747576002811461075157610780565b60019150506107df565b60ff8411156107635761076261068a565b5b8360020a91508482111561077a5761077961068a565b5b506107df565b5060208310610133831016604e8410600b84101617156107b55782820a9050838111156107b0576107af61068a565b5b6107df565b6107c284848460016106c3565b925090508184048111156107d9576107d861068a565b5b81810290505b9392505050565b5f60ff82169050919050565b5f6107fc82610493565b9150610807836107e6565b92506108347fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610715565b905092915050565b5f61084682610493565b915061085183610493565b925082820261085f81610493565b915082820484148315176108765761087561068a565b5b5092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108a68261087d565b9050919050565b6108b68161089c565b82525050565b5f6020820190506108cf5f8301846108ad565b92915050565b5f6108df82610493565b91506108ea83610493565b92508282019050808211156109025761090161068a565b5b92915050565b61091181610493565b82525050565b5f60608201905061092a5f8301866108ad565b6109376020830185610908565b6109446040830184610908565b949350505050565b5f60208201905061095f5f830184610908565b92915050565b610de2806109725f395ff3fe608060405234801561000f575f80fd5b5060043610610091575f3560e01c8063313ce56711610064578063313ce5671461013157806370a082311461014f57806395d89b411461017f578063a9059cbb1461019d578063dd62ed3e146101cd57610091565b806306fdde0314610095578063095ea7b3146100b357806318160ddd146100e357806323b872dd14610101575b5f80fd5b61009d6101fd565b6040516100aa9190610a5b565b60405180910390f35b6100cd60048036038101906100c89190610b0c565b61028d565b6040516100da9190610b64565b60405180910390f35b6100eb6102af565b6040516100f89190610b8c565b60405180910390f35b61011b60048036038101906101169190610ba5565b6102b8565b6040516101289190610b64565b60405180910390f35b6101396102e6565b6040516101469190610c10565b60405180910390f35b61016960048036038101906101649190610c29565b6102ee565b6040516101769190610b8c565b60405180910390f35b610187610333565b6040516101949190610a5b565b60405180910390f35b6101b760048036038101906101b29190610b0c565b6103c3565b6040516101c49190610b64565b60405180910390f35b6101e760048036038101906101e29190610c54565b6103e5565b6040516101f49190610b8c565b60405180910390f35b60606003805461020c90610cbf565b80601f016020809104026020016040519081016040528092919081815260200182805461023890610cbf565b80156102835780601f1061025a57610100808354040283529160200191610283565b820191905f5260205f20905b81548152906001019060200180831161026657829003601f168201915b5050505050905090565b5f80610297610467565b90506102a481858561046e565b600191505092915050565b5f600254905090565b5f806102c2610467565b90506102cf858285610480565b6102da858585610513565b60019150509392505050565b5f6012905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606004805461034290610cbf565b80601f016020809104026020016040519081016040528092919081815260200182805461036e90610cbf565b80156103b95780601f10610390576101008083540402835291602001916103b9565b820191905f5260205f20905b81548152906001019060200180831161039c57829003601f168201915b5050505050905090565b5f806103cd610467565b90506103da818585610513565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f33905090565b61047b8383836001610603565b505050565b5f61048b84846103e5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561050d57818110156104fe578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016104f593929190610cfe565b60405180910390fd5b61050c84848484035f610603565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610583575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161057a9190610d33565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105f3575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016105ea9190610d33565b60405180910390fd5b6105fe8383836107d2565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610673575f6040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161066a9190610d33565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106e3575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016106da9190610d33565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080156107cc578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107c39190610b8c565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610822578060025f8282546108169190610d79565b925050819055506108f0565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156108ab578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016108a293929190610cfe565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610937578060025f8282540392505081905550610981565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516109de9190610b8c565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610a2d826109eb565b610a3781856109f5565b9350610a47818560208601610a05565b610a5081610a13565b840191505092915050565b5f6020820190508181035f830152610a738184610a23565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610aa882610a7f565b9050919050565b610ab881610a9e565b8114610ac2575f80fd5b50565b5f81359050610ad381610aaf565b92915050565b5f819050919050565b610aeb81610ad9565b8114610af5575f80fd5b50565b5f81359050610b0681610ae2565b92915050565b5f8060408385031215610b2257610b21610a7b565b5b5f610b2f85828601610ac5565b9250506020610b4085828601610af8565b9150509250929050565b5f8115159050919050565b610b5e81610b4a565b82525050565b5f602082019050610b775f830184610b55565b92915050565b610b8681610ad9565b82525050565b5f602082019050610b9f5f830184610b7d565b92915050565b5f805f60608486031215610bbc57610bbb610a7b565b5b5f610bc986828701610ac5565b9350506020610bda86828701610ac5565b9250506040610beb86828701610af8565b9150509250925092565b5f60ff82169050919050565b610c0a81610bf5565b82525050565b5f602082019050610c235f830184610c01565b92915050565b5f60208284031215610c3e57610c3d610a7b565b5b5f610c4b84828501610ac5565b91505092915050565b5f8060408385031215610c6a57610c69610a7b565b5b5f610c7785828601610ac5565b9250506020610c8885828601610ac5565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610cd657607f821691505b602082108103610ce957610ce8610c92565b5b50919050565b610cf881610a9e565b82525050565b5f606082019050610d115f830186610cef565b610d1e6020830185610b7d565b610d2b6040830184610b7d565b949350505050565b5f602082019050610d465f830184610cef565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610d8382610ad9565b9150610d8e83610ad9565b9250828201905080821115610da657610da5610d4c565b5b9291505056fea2646970667358221220dad31183e9829269789a79f621d3d4dcbe2951a1d7994a9840bb7701c0aec35e64736f6c634300081a0033";
        let bc_bytes = Bytes::from_hex(erc20_deploy_hex).unwrap();

        let mut evm = Context::mainnet()
            .with_db(cache_db)
            .with_block(BlockEnv::default())
            .modify_tx_chained(|tx| {
                tx.caller = user;
                tx.kind = TxKind::Create;
                tx.value = U256::ZERO;
                tx.data = bc_bytes;
            })
            .build_mainnet();

        let evm_result = EvmHandler::default().run(&mut evm);

        assert_eq!(
            &EvmStorageSlot::new_changed(U256::ZERO, U256::from(1000000000000000000000000000u128)),
            evm_result
                .as_ref()
                .unwrap()
                .state
                .get(&address!("0x31256cb3d8cb35671f13b5b1680b2cf4fe55fc4f"))
                .unwrap()
                .storage
                .get(&erc_address_storage(user))
                .unwrap()
        );
    }

    #[test]
    fn test_transfer_erc20() {
        let user = address!("00000000000000000000000000000000000000a1");
        let mut cache_db = CacheDB::new(EmptyDB::default());
        cache_db.insert_account_info(
            user,
            AccountInfo {
                balance: U256::from(1_000_000_000_000_000_000u128),
                ..AccountInfo::default()
            },
        );

        // adddress is created by test_deploy_erc20
        let ca = address!("0x31256cb3d8cb35671f13b5b1680b2cf4fe55fc4f");
        // erc20_hex is created by test_deploy_erc20
        let erc20_hex = "0x608060405234801561000f575f80fd5b5060043610610091575f3560e01c8063313ce56711610064578063313ce5671461013157806370a082311461014f57806395d89b411461017f578063a9059cbb1461019d578063dd62ed3e146101cd57610091565b806306fdde0314610095578063095ea7b3146100b357806318160ddd146100e357806323b872dd14610101575b5f80fd5b61009d6101fd565b6040516100aa9190610a5b565b60405180910390f35b6100cd60048036038101906100c89190610b0c565b61028d565b6040516100da9190610b64565b60405180910390f35b6100eb6102af565b6040516100f89190610b8c565b60405180910390f35b61011b60048036038101906101169190610ba5565b6102b8565b6040516101289190610b64565b60405180910390f35b6101396102e6565b6040516101469190610c10565b60405180910390f35b61016960048036038101906101649190610c29565b6102ee565b6040516101769190610b8c565b60405180910390f35b610187610333565b6040516101949190610a5b565b60405180910390f35b6101b760048036038101906101b29190610b0c565b6103c3565b6040516101c49190610b64565b60405180910390f35b6101e760048036038101906101e29190610c54565b6103e5565b6040516101f49190610b8c565b60405180910390f35b60606003805461020c90610cbf565b80601f016020809104026020016040519081016040528092919081815260200182805461023890610cbf565b80156102835780601f1061025a57610100808354040283529160200191610283565b820191905f5260205f20905b81548152906001019060200180831161026657829003601f168201915b5050505050905090565b5f80610297610467565b90506102a481858561046e565b600191505092915050565b5f600254905090565b5f806102c2610467565b90506102cf858285610480565b6102da858585610513565b60019150509392505050565b5f6012905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606004805461034290610cbf565b80601f016020809104026020016040519081016040528092919081815260200182805461036e90610cbf565b80156103b95780601f10610390576101008083540402835291602001916103b9565b820191905f5260205f20905b81548152906001019060200180831161039c57829003601f168201915b5050505050905090565b5f806103cd610467565b90506103da818585610513565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f33905090565b61047b8383836001610603565b505050565b5f61048b84846103e5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561050d57818110156104fe578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016104f593929190610cfe565b60405180910390fd5b61050c84848484035f610603565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610583575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161057a9190610d33565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105f3575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016105ea9190610d33565b60405180910390fd5b6105fe8383836107d2565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610673575f6040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161066a9190610d33565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106e3575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016106da9190610d33565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080156107cc578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107c39190610b8c565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610822578060025f8282546108169190610d79565b925050819055506108f0565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156108ab578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016108a293929190610cfe565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610937578060025f8282540392505081905550610981565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516109de9190610b8c565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610a2d826109eb565b610a3781856109f5565b9350610a47818560208601610a05565b610a5081610a13565b840191505092915050565b5f6020820190508181035f830152610a738184610a23565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610aa882610a7f565b9050919050565b610ab881610a9e565b8114610ac2575f80fd5b50565b5f81359050610ad381610aaf565b92915050565b5f819050919050565b610aeb81610ad9565b8114610af5575f80fd5b50565b5f81359050610b0681610ae2565b92915050565b5f8060408385031215610b2257610b21610a7b565b5b5f610b2f85828601610ac5565b9250506020610b4085828601610af8565b9150509250929050565b5f8115159050919050565b610b5e81610b4a565b82525050565b5f602082019050610b775f830184610b55565b92915050565b610b8681610ad9565b82525050565b5f602082019050610b9f5f830184610b7d565b92915050565b5f805f60608486031215610bbc57610bbb610a7b565b5b5f610bc986828701610ac5565b9350506020610bda86828701610ac5565b9250506040610beb86828701610af8565b9150509250925092565b5f60ff82169050919050565b610c0a81610bf5565b82525050565b5f602082019050610c235f830184610c01565b92915050565b5f60208284031215610c3e57610c3d610a7b565b5b5f610c4b84828501610ac5565b91505092915050565b5f8060408385031215610c6a57610c69610a7b565b5b5f610c7785828601610ac5565b9250506020610c8885828601610ac5565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610cd657607f821691505b602082108103610ce957610ce8610c92565b5b50919050565b610cf881610a9e565b82525050565b5f606082019050610d115f830186610cef565b610d1e6020830185610b7d565b610d2b6040830184610b7d565b949350505050565b5f602082019050610d465f830184610cef565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610d8382610ad9565b9150610d8e83610ad9565b9250828201905080821115610da657610da5610d4c565b5b9291505056fea2646970667358221220dad31183e9829269789a79f621d3d4dcbe2951a1d7994a9840bb7701c0aec35e64736f6c634300081a0033000000000000000000000000000000000000000000000000000000000000000000";
        let bc_bytes = Bytes::from_hex(erc20_hex).unwrap();
        let bytecode = Bytecode::new_raw(bc_bytes);
        cache_db.insert_account_info(
            ca,
            AccountInfo {
                code_hash: bytecode.hash_slow(),
                code: Some(bytecode),
                ..AccountInfo::default()
            },
        );
        cache_db
            .insert_account_storage(ca, erc_address_storage(user), U256::from(2))
            .unwrap();

        let recipient = address!("0x5b38da6a701c568545dcfcb03fcb875f56beddc4");

        let mut evm = Context::mainnet()
            .with_db(cache_db)
            .with_block(BlockEnv::default())
            .modify_tx_chained(|tx| {
                tx.caller = user;
                tx.kind = TxKind::Call(ca);
                tx.value = U256::ZERO;
                tx.data = Bytes::from_hex(encode_ec20_transfer_data(&recipient, 1)).unwrap();
            })
            .build_mainnet();

        let evm_result = EvmHandler::default().run(&mut evm);

        assert_eq!(
            &EvmStorageSlot::new_changed(U256::from(2), U256::from(1)),
            evm_result
                .as_ref()
                .unwrap()
                .state
                .get(&address!("0x31256cb3d8cb35671f13b5b1680b2cf4fe55fc4f"))
                .unwrap()
                .storage
                .get(&erc_address_storage(user))
                .unwrap()
        );
        assert_eq!(
            &EvmStorageSlot::new_changed(U256::from(0), U256::from(1)),
            evm_result
                .as_ref()
                .unwrap()
                .state
                .get(&address!("0x31256cb3d8cb35671f13b5b1680b2cf4fe55fc4f"))
                .unwrap()
                .storage
                .get(&erc_address_storage(recipient))
                .unwrap()
        );
    }
}
