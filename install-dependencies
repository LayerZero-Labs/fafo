#!/bin/bash

set -e
set -o pipefail

OS=$(uname -s)

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
TMPDIR=${TMPDIR:-/tmp}
ROOT="$DIR/"
CARGO_CRATES="cargo-nextest@^0.9 cargo-llvm-cov@^0.6 cargo-deny@^0.17 cargo-expand@^1.0.101 cargo-watch@^8.5.3 just@^1.39.0"

# ==========//=========//=========//=========//==========//==========//==========
# general functions
say() {
    printf ":o %s\n" "$1"
}

warn() {
    say "warning: ${1}" >&2
}

err() {
    say "$1" >&2
    exit 1
}

check_cmd() {
    command -v "$1" &> /dev/null
}

need_cmd() {
    if ! check_cmd "$1"; then
        err "need '$1' (command not found)"
    fi
}

ensure() {
    if ! "$@"; then err "command failed: $*"; fi
}

function try_sudo() {
    if [ "$(id -u)" -eq 0 ]; then
        bash -c "$1"
    else
        sudo bash -c "$1"
    fi
}

function box_out() {
    local s=("$@") b w
    for l in "${s[@]}"; do
        ((w < ${#l})) && {
            b="$l"
            w="${#l}"
        }
    done
    tput setaf 3
    echo " -${b//?/-}-
| ${b//?/ } |"
    for l in "${s[@]}"; do
        printf '| %s%*s%s |\n' "$(tput setaf 4)" "-$w" "$l" "$(tput setaf 3)"
    done
    echo "| ${b//?/ } |
 -${b//?/-}-"
    tput sgr 0
}

function get_profile_path() {
    local PROFILE=
    local PREF_SHELL
    case $SHELL in
        */zsh)
            PROFILE=${ZDOTDIR-"$HOME"}/.zshenv
            ;;
        */bash)
            PROFILE=$HOME/.bash_profile
            ;;
        */fish)
            PROFILE=$HOME/.config/fish/config.fish
            ;;
        */ash)
            PROFILE=$HOME/.profile
            ;;
        *)
            echo ": could not detect shell"
            exit 1
            ;;
    esac

    echo $PROFILE
}

function get_shell_name() {
    local PREF_SHELL=
    case $SHELL in
        */zsh)
            PREF_SHELL=zsh
            ;;
        */bash)
            PREF_SHELL=bash
            ;;
        */fish)
            PREF_SHELL=fish
            ;;
        */ash)
            PREF_SHELL=ash
            ;;
        *)
            echo ": could not detect shell"
            exit 1
            ;;
    esac

    echo $PREF_SHELL
}

function add_path_to_profile() {
    local PROFILE="$1"
    local BIN_DIR="$2"

    # use a subshell to avoid clobbering the calling shell's $PATH
    if ! env -i HOME=$HOME TERM=$TERM $SHELL -c "export PATH=#:\$PATH; . \"$PROFILE\"; echo \$PATH | sed 's/:#.*//g' | grep -q \"${BIN_DIR}\""; then
        # Add the directory to the path and ensure the old PATH variables remain.
        echo "export PATH=\"$BIN_DIR:\$PATH\"" >> "$PROFILE"
    fi
}

function verify_search_path() {
    local cmd="$1"
    local expected="$2"
    local cwd="$3"

    # use a subshell to avoid clobbering the calling shell's $PATH
    local current=$(dirname $(env -i HOME=$HOME TERM=$TERM DIRENV_LOG_FORMAT= $SHELL -i -c "cd \"$cwd\"; which \"$cmd\""))

    if [[ "$current" != "$expected" ]]; then
        echo -e "\033[0;31mWARNING: $cmd in the $current directory has higher priority over $expected in the search path \$PATH.
    You can fix it by removing $cmd from $current or changing the order of directories in \$PATH.\033[0m"
    fi
}

# Function to compare semantic versions based on operator in required_version
# Returns 0 if version1 matches the requirements, 1 otherwise
function version_matches() {
    local installed_version=$1  # installed version
    local required_version=$2   # required version with operator

    # Detect operator and clean version
    local operator="^"  # default operator
    case $required_version in
        "="*)  operator="=";  required_version=${required_version#=} ;;
        ">="*) operator=">="; required_version=${required_version#>=} ;;
        ">"*)  operator=">";  required_version=${required_version#>} ;;
        "~"*)  operator="~";  required_version=${required_version#~} ;;
        "^"*)  operator="^";  required_version=${required_version#^} ;;
    esac
    
    # Convert versions to arrays
    local installed_parts=(${installed_version//./ })
    local required_parts=(${required_version//./ })

    # Fill in missing version parts with 0
    for i in {0..2}; do
        installed_parts[$i]=${installed_parts[$i]:-0}
        required_parts[$i]=${required_parts[$i]:-0}
    done

    case $operator in
        "=")
            # Exact match
            [[ "$installed_version" == "$required_version" ]] && return 0
            ;;
        ">=")
            # Greater than or equal
            for i in {0..2}; do
                if [ "${installed_parts[$i]}" -gt "${required_parts[$i]}" ]; then
                    return 0
                elif [ "${installed_parts[$i]}" -lt "${required_parts[$i]}" ]; then
                    return 1
                fi
            done
            return 0
            ;;
        ">")
            # Greater than
            for i in {0..2}; do
                if [ "${installed_parts[$i]}" -gt "${required_parts[$i]}" ]; then
                    return 0
                elif [ "${installed_parts[$i]}" -lt "${required_parts[$i]}" ]; then
                    return 1
                fi
            done
            return 1
            ;;
        "~")
            # Tilde Range
            # If patch is specified: ~1.2.3 := >=1.2.3 <1.3.0
            # If minor is specified: ~1.2 := >=1.2.0 <1.3.0
            # If only major is specified: ~1 := >=1.0.0 <2.0.0
            if [ "${required_parts[0]}" -ne "${installed_parts[0]}" ]; then
                return 1
            fi
            
            if [ -n "${required_version##*.*.}" ]; then
                # Only major specified (~1)
                [ "${installed_parts[0]}" -eq "${required_parts[0]}" ] && return 0
            elif [ -n "${required_version##*.*}" ]; then
                # Major.minor specified (~1.2)
                [ "${installed_parts[0]}" -eq "${required_parts[0]}" ] && \
                [ "${installed_parts[1]}" -eq "${required_parts[1]}" ] && \
                [ "${installed_parts[2]}" -ge 0 ] && return 0
            else
                # Full version specified (~1.2.3)
                [ "${installed_parts[0]}" -eq "${required_parts[0]}" ] && \
                [ "${installed_parts[1]}" -eq "${required_parts[1]}" ] && \
                [ "${installed_parts[2]}" -ge "${required_parts[2]}" ] && return 0
            fi
            ;;
        "^")
            # Caret Range
            # Allows changes that do not modify the left-most non-zero digit
            # ^1.2.3 := >=1.2.3 <2.0.0
            # ^0.2.3 := >=0.2.3 <0.3.0
            # ^0.0.3 := >=0.0.3 <0.0.4
            
            # Find the first non-zero part
            local first_non_zero=0
            for i in {0..2}; do
                if [ "${required_parts[$i]}" -ne 0 ]; then
                    first_non_zero=$i
                    break
                fi
            done
            
            # All parts before the first non-zero must match exactly
            for ((i=0; i<first_non_zero; i++)); do
                [ "${installed_parts[$i]}" -eq "${required_parts[$i]}" ] || return 1
            done
            
            # The first non-zero part must match exactly
            [ "${installed_parts[$first_non_zero]}" -eq "${required_parts[$first_non_zero]}" ] || return 1
            
            # All parts after must be greater than or equal to the required version
            for ((i=first_non_zero+1; i<3; i++)); do
                if [ "${installed_parts[$i]}" -lt "${required_parts[$i]}" ]; then
                    return 1
                elif [ "${installed_parts[$i]}" -gt "${required_parts[$i]}" ]; then
                    return 0
                fi
            done
            return 0
            ;;
    esac
    return 1
}

# ==========//=========//=========//=========//==========//==========//==========
# versions
[[ -f "$ROOT/.versions" ]] && source "$ROOT/.versions"

function detect_rust_toolchain_version() {
    if [[ -f "rust-toolchain" ]]; then
        head -n 1 rust-toolchain | tr -d '"'
    elif [[ -f "rust-toolchain.toml" ]]; then
        sed -nE 's/^channel\s*=\s*"([^"]+)".*/\1/p' rust-toolchain.toml
    fi
}

NVM_VERSION=${NVM_VERSION:-0.39.3}
NODE_VERSION=${NODE_VERSION:-16.20.0}
RUST_TOOLCHAIN_VERSION=${RUST_TOOLCHAIN_VERSION:-$(detect_rust_toolchain_version || echo "1.84.1")}
FOUNDRY_COMMIT=${FOUNDRY_COMMIT:-1bcd17c8299d7c0792a77b2d4a0cf2c531a5cab2}
FORGE_VERSION=$(echo $FOUNDRY_COMMIT | cut -c 1-7)

BASE_DIR=${XDG_CONFIG_HOME:-$HOME}
NVM_DIR=${NVM_DIR:-"$HOME/.nvm"}
NODE_BIN_DIR="$HOME/.nvm/versions/node/v${NODE_VERSION}/bin"
RUSTUP_HOME=${RUSTUP_HOME:-"$HOME/.rustup"}
CARGO_HOME=${CARGO_HOME:-"$HOME/.cargo"}
CARGO_BIN_DIR="$CARGO_HOME/bin"
FOUNDRY_DIR=${FOUNDRY_DIR:-"$BASE_DIR/.foundry"}
FOUNDRY_BIN_DIR="$FOUNDRY_DIR/bin"
SP1_DIR=${SP1_DIR:-"$HOME/.sp1"}
SP1_BIN_DIR="$SP1_DIR/bin"
SP1_VERSION=${SP1_VERSION:-4.1.0}
SUCCINCT_RUST_VERSION=${SUCCINCT_RUST_VERSION:-1.81.0-dev}

# https://docs.brew.sh/Installation
case $(uname -m) in
    x86_64)
        BREW_BIN_DIR=${BREW_BIN_DIR:-"/usr/local/bin/"}
        ;;
    arm64)
        BREW_BIN_DIR=${BREW_BIN_DIR:-"/opt/homebrew/bin"}
        ;;
esac

# ==========//=========//=========//=========//==========//==========//==========
# brew
function load_brew() {
    PATH="${BREW_BIN_DIR}:$PATH"
}

function ensure_brew() {
    load_brew
    if ! check_cmd brew; then
        box_out "MacOS: brew is not installed. please access https://brew.sh for installation."
        exit 1
    fi
}

# rosetta
function ensure_rosetta() {
    if ! /usr/bin/pgrep oahd > /dev/null 2>&1; then
        /usr/sbin/softwareupdate --install-rosetta --agree-to-license
    fi
}

# nvm
function load_nvm() {
    if [ -s "$NVM_DIR/nvm.sh" ]; then
        \. "$NVM_DIR/nvm.sh" --no-use
    fi
}

function ensure_nvm() {
    load_nvm

    version=${NVM_VERSION:-0.39.3}
    if ! check_cmd nvm || [[ $(nvm --version) != "$version" ]]; then
        # https://github.com/nvm-sh/nvm#installing-and-updating
        say "Installing NVM version ${version}..."
        mkdir -p "$NVM_DIR"
        curl -fsSL -o- https://raw.githubusercontent.com/nvm-sh/nvm/v${version}/install.sh | NVM_DIR="$NVM_DIR" bash 1>/dev/null
        load_nvm
        say "✓ NVM ${version} installed"
    else
        say "✓ NVM ${version} already installed"
    fi
}

function load_node() {
    load_nvm
    PATH="${NODE_BIN_DIR}:$PATH"
}

function ensure_node() {
    ensure_nvm
    load_node

    version=${NODE_VERSION}
    if ! nvm ls $version > /dev/null 2>&1; then
        say "Installing Node.js v${version}..."
        nvm install v${version} --no-progress 1>/dev/null
        say "✓ Node.js v${version} installed"
    else
        say "✓ Node.js v${version} already installed"
    fi
}

function ensure_yarn() {
    ensure_node

    path=$(dirname $(nvm which ${NODE_VERSION}))
    if [ ! -x "${path}/yarn" ]; then
        say "Installing Yarn..."
        npm install -g yarn 1>/dev/null
        say "✓ Yarn installed"
    else
        say "✓ Yarn already installed"
    fi
}

# rustup
function load_rustup() {
    PATH="${CARGO_BIN_DIR}:$PATH"
}

function ensure_rustup() {
    load_rustup

    if ! check_cmd rustup; then
        # https://www.rust-lang.org/tools/install
        say "Installing Rustup..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sed 's#/proc/self/exe#\/bin\/sh#g' | sh -s -- -y --no-update-default-toolchain 1>/dev/null
        say "✓ Rustup installed"
    else
        say "✓ Rustup already installed"
    fi
}

# cargo
function load_cargo() {
    PATH="${CARGO_BIN_DIR}:$PATH"
}

function ensure_cargo() {
    ensure_rustup

    if ! rustup toolchain list | grep -q "^${RUST_TOOLCHAIN_VERSION}"; then
        say "Installing Rust toolchain ${RUST_TOOLCHAIN_VERSION}..."
        rustup toolchain install ${RUST_TOOLCHAIN_VERSION} --profile minimal 1>/dev/null
        rustup default ${RUST_TOOLCHAIN_VERSION}
        say "✓ Rust toolchain ${RUST_TOOLCHAIN_VERSION} installed"
    else
        say "✓ Rust toolchain ${RUST_TOOLCHAIN_VERSION} already installed"
    fi

    # Define required components
    local components=("clippy" "rustfmt")
    
    local missing_components=()
    for component in "${components[@]}"; do
        if rustup component list --toolchain ${RUST_TOOLCHAIN_VERSION} | grep -q "^${component} (unavailable)"; then
            warn "Component ${component} is unavailable for toolchain ${RUST_TOOLCHAIN_VERSION}"
        elif ! rustup component list --installed --toolchain ${RUST_TOOLCHAIN_VERSION} | grep -q "^${component}"; then
            missing_components+=("$component")
        else
            say "✓ Component ${component} already installed"
        fi
    done
    
    if [ ${#missing_components[@]} -gt 0 ]; then
        say "Installing components: ${missing_components[*]}..."
        rustup component add --toolchain ${RUST_TOOLCHAIN_VERSION} "${missing_components[@]}" 1>/dev/null
        say "✓ Components installed"
    fi
}


# Function to get crate version from cargo
function get_crate_version() {
    local crate_name=$1
    local version=""
    
    if [[ "$crate_name" == cargo-* ]]; then
        # Handle cargo subcommands
        local subcommand=${crate_name#cargo-}
        if cargo $subcommand --version &>/dev/null; then
            # Get first line of version output and extract version number
            version=$(cargo $subcommand --version | head -n1 | grep -o '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*')
        fi
    else
        # Handle regular crates
        if command -v "$crate_name" >/dev/null 2>&1; then
            version=$($crate_name --version | head -n1 | grep -o '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*')
        fi
    fi

    # Return 0.0.0 if version couldn't be determined
    echo "${version:-0.0.0}"
}

# crates
function ensure_crates() {
    say "Checking Cargo crates..."
    local crates_to_install=()
    
    for crate_spec in ${CARGO_CRATES}; do
        local crate_name="${crate_spec%@*}"
        local required_version="${crate_spec#*@}"
        local installed_version=$(get_crate_version "$crate_name")
        
        if ! version_matches "$installed_version" "$required_version"; then
            crates_to_install+=("$crate_spec")
        else
            say "✓ ${crate_name} ${installed_version} already installed"
        fi
    done
    
    if [ ${#crates_to_install[@]} -gt 0 ]; then
        say "Installing cargo crates: ${crates_to_install[*]}..."
        cargo install --force ${crates_to_install[@]} 1>/dev/null
        say "✓ All crates installed successfully"
    else
        say "✓ All crates are up to date"
    fi
}

# gh
function ensure_gh() {
    if check_cmd gh; then
        say "✓ GitHub CLI already installed"
        return
    fi

    say "Installing GitHub CLI..."
    case $OS in
        Linux)
            local cmd=$(cat <<- EOF
    set -e
    set -o pipefail

    apt-get install -y --no-install-recommends ca-certificates curl
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg status=none
    chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list >/dev/null
    apt-get update
    apt-get install -y --no-install-recommends gh
EOF
            )
            try_sudo "$cmd" 1>/dev/null
            ;;
        Darwin)
            ensure_brew
            brew install gh 1>/dev/null
            ;;
    esac
    say "✓ GitHub CLI installed"
}

# foundry
function load_foundry() {
    PATH="${FOUNDRY_BIN_DIR}:$PATH"
}

function ensure_foundry() {
    load_foundry

    if ! check_cmd forge || [[ "$(forge --version | sed -n 's/^Commit SHA: \([a-f0-9]\+\)/\1/p')" != "$FOUNDRY_COMMIT" ]]; then
        # https://github.com/foundry-rs/foundry#installation
        say "Installing Foundry..."
        curl -L https://foundry.paradigm.xyz | sed "s,master/foundryup,${FOUNDRY_COMMIT}/foundryup,g" | bash 1>/dev/null
        echo "$(sed 's/FOUNDRYUP_VERSION="nightly"/:/g' ${FOUNDRY_BIN_DIR}/foundryup)" > "${FOUNDRY_BIN_DIR}/foundryup"
        
        say "Configuring Foundry..."
        case $OS in
            Darwin)
                foundryup --commit ${FOUNDRY_COMMIT} 1>/dev/null
                ;;
            *)
                # Use generic target-cpu to avoid illegal instruction errors on macOS
                CARGO_ENCODED_RUSTFLAGS="-Ctarget-cpu=generic" foundryup --commit ${FOUNDRY_COMMIT} 1>/dev/null
                ;;
        esac
        say "✓ Foundry installed"
    else
        say "✓ Foundry already installed"
    fi
}

# sp1up
function load_sp1up() {
    PATH="${SP1_BIN_DIR}:$PATH"
}

function ensure_sp1up() {
    load_sp1up
    if ! check_cmd sp1up; then
        say "Installing SP1 updater..."
        curl -L https://sp1up.succinct.xyz | SP1_DIR="$SP1_DIR" bash 1>/dev/null
        say "✓ SP1 updater installed"
    else
        say "✓ SP1 updater already installed"
    fi
}

# sp1
function ensure_sp1() {
    ensure_sp1up

    if ! check_cmd cargo-prove \
        || ! cargo +succinct --version &> /dev/null \
        || [[ "$(cargo +succinct --version | awk '{print $2}')" != "$SUCCINCT_RUST_VERSION" ]]; then
        say "Installing SP1 version ${SP1_VERSION}..."
        SP1_DIR="$SP1_DIR" sp1up --version "${SP1_VERSION}" 1>/dev/null        
        if ! cargo +succinct --version >/dev/null 2>&1; then
            ln -s $(rustup which cargo) $(rustup which rustc --toolchain succinct | sed 's|/rustc$||')/cargo
        fi
        say "✓ SP1 ${SP1_VERSION} installed"
    else
        say "✓ SP1 already installed"
    fi
}

# workspace
function ensure_workspace() {
    say "Installing workspace dependencies..."
    yarn install 1>/dev/null
    say "✓ Workspace setup completed"
}

function ensure_profile() {
    local PROFILE=$(get_profile_path)

    # brew should be put at the first, otherwise the software installed with brew will has higher priority in search path.
    case $(uname -s) in
        Darwin)
            if [ ! -f "$PROFILE" ] || ! grep -q 'brew shellenv' "$PROFILE"; then
                cat <<- EOF | sed 's/^[[:space:]]*//' >> "$PROFILE"
      eval "\$(${BREW_BIN_DIR}/brew shellenv)"
EOF
            fi
            ;;
    esac

    local shell=$(get_shell_name)

    case $shell in
        sh | bash | zsh)
            if [ ! -f "$PROFILE" ] || ! grep -q 'direnv hook' "$PROFILE"; then
                cat <<- EOF | sed 's/^[[:space:]]*//' >> "$PROFILE"
      eval "\$(direnv hook ${shell})"
EOF
            fi
            ;;
        *)
            echo ": could not install direnv for ${shell}"
            exit 1
            ;;
    esac

    say "direnv has been setup in $PROFILE"
}

function get_envrc_path() {
    local PROFILE="$ROOT/.envrc"
    touch "$PROFILE"
    echo $PROFILE
}

function ensure_envrc() {
    local PROFILE=$(get_envrc_path)

    # Some softwares will be installed with cargo, so cargo bin dir should be output here ahead of others.
    # As a result, cargo bin dir will have a lower priotiry in search path.
    add_path_to_profile "$PROFILE" "${CARGO_BIN_DIR}"
    add_path_to_profile "$PROFILE" "${FOUNDRY_BIN_DIR}"
    add_path_to_profile "$PROFILE" "${SP1_BIN_DIR}"

    case "$(uname -s)-$(uname -m)" in
        Darwin-*)
            if [ ! -f "$PROFILE" ] || ! grep -q 'SDKROOT=' "$PROFILE"; then
                cat <<- 'EOF' | sed 's/^[[:space:]]*//' >> "$PROFILE"
          export SDKROOT="$(xcrun --show-sdk-path --sdk macosx)"
EOF
            fi
            ;;
    esac
}

function verify_installs() {
    direnv allow "$ROOT"
    verify_search_path cargo "${CARGO_BIN_DIR}" "$ROOT"
    verify_search_path forge "${FOUNDRY_BIN_DIR}" "$ROOT"
    verify_search_path cargo-prove "${SP1_BIN_DIR}" "$ROOT"
}

function ensure_tools() {
    ensure_yarn
    ensure_cargo
    ensure_crates
    ensure_gh
    ensure_foundry
    ensure_sp1
    ensure_workspace
}

function install_on_macos() {
    ensure_rosetta
    ensure_brew

    say "Installing system dependencies..."
    brew install --quiet libusb shfmt 1>/dev/null
    say "✓ System dependencies installed"

    ensure_tools
}

function install_on_linux() {
    say "Installing system packages..."
    local cmd=$(cat <<- EOF
    set -e
    set -o pipefail
    
    apt-get update
    apt-get install -y --no-install-recommends ca-certificates bash sudo curl wget git build-essential pkg-config direnv \
      g++ linux-libc-dev libclang-dev unzip libjemalloc-dev make time jq shfmt libssl-dev
EOF
    )
    try_sudo "$cmd" 1>/dev/null
    say "✓ System packages installed"

    ensure_tools
}

function show_post_install_instructions() {

    local shell=$(get_shell_name)
    local message=$(
        cat <<- EOF | sed 's/^[[:space:]]*//'

start a new terminal session to use installed softwares, or run the command in the current terminal session:

  \033[0;34meval "\$(direnv hook $shell)"\033[0m

If you have trouble when building the workspace, please try to changing the order of directories in \$PATH.

EOF
    )
    echo -e "$message"
}

# Main installation flow
say "Starting installation process..."

case $OS in
    Linux)
        install_on_linux
        ;;
    Darwin)
        install_on_macos
        ;;
    *)
        err "Unsupported operating system: $OS"
        ;;
esac

ensure_profile
ensure_envrc
verify_installs

say "✓ Installation completed successfully!"

show_post_install_instructions
